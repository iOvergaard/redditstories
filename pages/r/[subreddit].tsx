import marked from "marked";
import {
  GetStaticPathsResult,
  GetStaticPropsContext,
  GetStaticPropsResult,
  NextPage,
} from "next";
import Head from "next/head";
import { useEffect, useState } from "react";

import Layout from "../../components/layout";
import Post from "../../components/post";
import { tryGetSubreddit } from "../../lib/reddit";
import styles from "../../styles/Subreddit.module.css";

type Props = {
  subredditName: string;
  subreddit: any;
};

const Subreddit: NextPage<Props> = (props: Props) => {
  const [after, setAfter] = useState<string>(props.subreddit.after);
  const [count, setCount] = useState(25);
  const [posts, setPosts] = useState<any>(props.subreddit.posts);

  useEffect(() => {
    window.scrollTo({ top: 0, behavior: "smooth" });
  }, [posts]);

  const onLoadMore = async () => {
    const requestUrl = `/api/subreddit?subreddit=${props.subredditName}&after=${after}&count=${count}`;
    const response = await fetch(requestUrl).then((r) => r.json());

    if (response) {
      setAfter(response.after);
      setCount(count + 25);
      setPosts(response.posts);
    }
  };

  return (
    <Layout title={props.subredditName}>
      <Head>
        <title>Subreddit {props.subredditName}</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      {posts?.length
        ? posts.map((post: any) => (
            <div key={post.id} className={styles.post}>
              <Post post={post} />
            </div>
          ))
        : "No posts found"}
      <button type="button" onClick={() => onLoadMore()}>
        Load more
      </button>
    </Layout>
  );
};

export function getStaticPaths(): GetStaticPathsResult {
  return {
    paths: ["/r/gonewildstories", "/r/talesfromtechsupport"],
    fallback: "blocking",
  };
}

export async function getStaticProps(
  context: GetStaticPropsContext<Props>
): Promise<GetStaticPropsResult<Props>> {
  const subredditName = context.params?.subreddit;

  if (!subredditName) {
    return {
      notFound: true,
    };
  }

  let subreddit = await tryGetSubreddit(subredditName);

  if (!subreddit) {
    return {
      notFound: true,
    };
  }

  return {
    props: {
      subredditName,
      subreddit,
    },
    revalidate: 300,
  };
}

export default Subreddit;
