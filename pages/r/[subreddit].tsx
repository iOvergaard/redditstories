import {
  GetStaticPathsResult,
  GetStaticPropsContext,
  GetStaticPropsResult,
  NextPage,
} from "next";
import Head from "next/head";
import { tryGetSubreddit } from "../../lib/reddit";
import styles from "../../styles/Home.module.css";

type Props = {
  subreddit: string;
  posts: any[];
};

const Subreddit: NextPage<Props> = (props: Props) => {
  return (
    <div className={styles.container}>
      <main className={styles.main}>
        <Head>
          <title>Subreddit {props.subreddit}</title>
          <meta name="description" content="Generated by create next app" />
          <link rel="icon" href="/favicon.ico" />
        </Head>

        <h1 className={styles.title}>{props.subreddit}</h1>
        {props.posts.length
          ? props.posts.map((post) => (
              <article key={post.id}>
                <header>
                  <h3
                    style={{ whiteSpace: "pre-line", wordBreak: "break-word" }}
                  >
                    {post.title}
                  </h3>
                  <p>By: {post.author_fullname}</p>
                  <p>
                    Posted: {new Date(post.created_utc * 1000).toUTCString()}
                  </p>
                </header>
                <div
                  style={{ whiteSpace: "pre-line", wordBreak: "break-word" }}
                >
                  {post.selftext}
                </div>
                <p>
                  <a target="_blank" rel="noopener noreferrer" href={post.url}>
                    Read thread
                  </a>
                </p>
                <hr />
              </article>
            ))
          : "No posts found"}
      </main>
    </div>
  );
};

export function getStaticPaths(): GetStaticPathsResult {
  return {
    paths: ["/r/gonewildstories", "/r/talesfromtechsupport"],
    fallback: "blocking",
  };
}

export async function getStaticProps(
  context: GetStaticPropsContext<Props>
): Promise<GetStaticPropsResult<Props>> {
  const subreddit = context.params?.subreddit;

  if (!subreddit) {
    return {
      notFound: true,
    };
  }

  const posts = await tryGetSubreddit(subreddit);

  if (!posts) {
    return {
      notFound: true,
    };
  }

  return {
    props: {
      subreddit,
      posts,
    },
    revalidate: 300,
  };
}

export default Subreddit;
